version: '3.8'

services:
  # FastAPI Streaming Server
  fastapi-streaming:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - STREAMING_ENABLED=true
      - STREAMING_DELAY=0.05
      - MAX_CONCURRENT_STREAMS=100
      - LOG_LEVEL=info
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ai-chat-network

  # NestJS Backend API
  nestjs-backend:
    build:
      context: ./ai-chat-backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - FASTAPI_URL=http://fastapi-streaming:8000
      - CORS_ORIGIN=http://localhost:3000,https://yourdomain.com
      - RATE_LIMIT_TTL=60
      - RATE_LIMIT_LIMIT=100
    depends_on:
      fastapi-streaming:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Next.js Frontend
  nextjs-frontend:
    build:
      context: ./your-nextjs-app
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:3001
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://nestjs-backend:3001
    depends_on:
      nestjs-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - nextjs-frontend
      - nestjs-backend
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Redis for Session Management (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - ai-chat-network

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3001"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - ai-chat-network

networks:
  ai-chat-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
